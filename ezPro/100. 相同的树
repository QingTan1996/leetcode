给定两个二叉树，编写一个函数来检验它们是否相同。
如果两个树在结构上相同，并且节点具有相同的值，则认为它们是相同的。

bool isSameTree(TreeNode* p, TreeNode* q) 
{
    stack<TreeNode*> st;  
    st.push(p);
    st.push(q);
        
    while(!st.empty()) {
            p = st.top();
            st.pop();
            q = st.top();
            st.pop();
            if (q != nullptr && p == nullptr) return false;
            if (q == nullptr && p != nullptr) return false;
            if (p == nullptr && q == nullptr) continue;
            if (p->val != q->val) return false;
            
            st.push(p->left);
            st.push(q->left);
            st.push(p->right);
            st.push(q->right);
    }
    return true;
}

//递归
bool isSameTree(TreeNode* p, TreeNode* q) 
{
    if(!p&&!q)  return true;//两个节点为空时返回true
    else if(p&&q&&(p->val==q->val)) return isSameTree(p->left,q->left)&&isSameTree(p->right,q->right);//p与q不为空时比较其左右节点值
    else    return false;//其他情况fanhuifalse
}