编写一个算法来判断一个数是不是“快乐数”。    
一个“快乐数”定义为：对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和，然后重复这个过程直到这个数变为 1，也可能是无限循环但始终变不到 1。如果可以变为 1，那么这个数就是快乐数。


int calSum(int n)
{
    int sum=0;
    while(n)
    {
        sum+=(n%10)*(n%10);
        n/=10;
    }
    return sum;
}
//快慢指针，如果有闭环会相遇（一定会吗）
bool isHappy(int n) 
{
    int pre,next;
    next=pre=n;
    while(1)
    {
        pre=calSum(pre);
        next=calSum(calSum(next));
        if(pre==1||next==1)  
            return true;
        if(pre==next)   
            return false;
    }
}

//set判断是否存在之前出现的元素
bool isHappy(int n) 
{
    int sum;
    unordered_set<int> s;
    do
    {
        s.insert(n);
        string str=to_string(n);
        sum=0;
        for(char c:str)
            sum+=pow(c-'0',2);
        if((n=sum)==1)
            return true;
    }while(s.find(sum)==s.end());
    return false;
}