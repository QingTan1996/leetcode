给定不同面额的硬币 coins 和一个总金额 amount。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回 -1。

//动态规划
int coinChange(vector<int>& coins, int amount) 
{
    vector<int> dp(amount+1,amount+1);
    dp[0]=0;
    for(int i=1;i<=amount;++i)
    {
        for(int j=0;j<coins.size();++j)
        {
            if(coins[j]<=i)
                dp[i]=min(dp[i-coins[j]]+1,dp[i]);
        }
    }
    return dp[amount]>amount?-1:dp[amount];
}


//递归
public int coinChange(int[] coins, int amount) {
    if(amount<1) return 0;
    return helper(coins, amount, new int[amount]);
}

private int helper(int[] coins, int rem, int[] count) { // rem: remaining coins after the last step; count[rem]: minimum number of coins to sum up to rem
    if(rem<0) return -1; // not valid
    if(rem==0) return 0; // completed
    if(count[rem-1] != 0) return count[rem-1]; // already computed, so reuse
    int min = Integer.MAX_VALUE;
    for(int coin : coins) {
        int res = helper(coins, rem-coin, count);
        if(res>=0 && res < min)
            min = 1+res;
    }
    count[rem-1] = (min==Integer.MAX_VALUE) ? -1 : min;
    return count[rem-1];
}