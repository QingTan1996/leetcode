给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。

//很简洁的写法
void moveZeroes(vector<int>& nums) 
{
    if(nums.empty())    return;
    int count=0;
    for(auto i=nums.begin();i!=nums.end();)
    {
        if(*i==0)
        {
            nums.erase(i);
            ++count;
        }    
        else
            ++i;
    }
    for(int i=0;i<count;++i)
        nums.push_back(0);
}


//通过交换元素进行移动
void moveZeroes(vector<int>& nums) 
{
    if(nums.empty())    return;
    int index=0;
    while(index<nums.size()-1)
    {
        if(nums[index]==0)
        {
            int i=index+1;
            /*找到第一个非0元素*/
            while(i<nums.size()&&nums[i]==0)    ++i;
            /*有可能i=nums.size()*/
            if(i!=nums.size())
                swap(nums[index],nums[i]);
        }
        ++index;
    }
}

//套用稳定排序，0的值最大
bool cmp(int num1,int num2)
{
    if(num2==0)
        return true;
    else
        return false;
}
void moveZeroes(vector<int>& nums) 
{
    if(nums.empty())    return;
    for(int i=0;i<nums.size();++i)
        for(int j=1;j<nums.size()-i;++j)
            if(cmp(nums[j],nums[j-1]))
                swap(nums[j],nums[j-1]);
}